import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_USER_ID', '0'))

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users = {}
pending_ids = {}

class SimpleBot:
    def __init__(self):
        self.app = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_id = user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in users:
            users[user_id] = {
                'name': user.first_name or user.username,
                'status': 'new',
                'platform_id': None
            }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if user_id == ADMIN_ID:
            await self.show_admin_menu(update.message.reply_text)
        else:
            await self.show_user_menu(update.message.reply_text)
    
    async def show_user_menu(self, reply_func):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = [
            [InlineKeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
            [InlineKeyboardButton("üÜî –û—Ç–ø—Ä–∞–≤–∏—Ç—å ID", callback_data="send_id")],
            [InlineKeyboardButton("üìà –°–∏–≥–Ω–∞–ª", callback_data="signal")],
            [InlineKeyboardButton("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/razgondepoz1ta")]
        ]
        
        await reply_func(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID\n3. –ü–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª—ã",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    
    async def show_admin_menu(self, reply_func):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users")],
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("üì¢ –°–∏–≥–Ω–∞–ª –≤—Å–µ–º", callback_data="broadcast")]
        ]
        
        await reply_func(
            "üëã <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if user_id == ADMIN_ID:
            await self.handle_admin_callback(query, data)
        else:
            await self.handle_user_callback(query, data)
    
    async def handle_user_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if data == "register":
            await query.edit_message_text(
                "üîó <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ: https://bit.ly/4jb8a4k\n\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]),
                parse_mode=ParseMode.HTML
            )
        
        elif data == "send_id":
            await query.edit_message_text(
                "üÜî <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ ID –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]),
                parse_mode=ParseMode.HTML
            )
        
        elif data == "signal":
            user = users.get(query.from_user.id, {})
            if user.get('status') == 'confirmed':
                signal = self.generate_signal()
                await query.edit_message_text(
                    f"üìà <b>–°–ò–ì–ù–ê–õ</b>\n\n{signal}",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]),
                    parse_mode=ParseMode.HTML
                )
            else:
                await query.edit_message_text(
                    "‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]),
                    parse_mode=ParseMode.HTML
                )
        
        elif data == "back":
            await self.show_user_menu(query.edit_message_text)
    
    async def handle_admin_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞"""
        if data == "users":
            text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            for uid, user in users.items():
                status = user.get('status', 'new')
                emoji = "‚úÖ" if status == 'confirmed' else "‚è≥" if status == 'pending' else "‚ùå"
                text += f"{emoji} {uid}: {user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {status}\n"
            
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]),
                parse_mode=ParseMode.HTML
            )
        
        elif data == "confirm":
            if pending_ids:
                text = "‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n"
                keyboard = []
                for uid, platform_id in pending_ids.items():
                    user_name = users.get(uid, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    text += f"üë§ {uid}: {user_name} - {platform_id}\n"
                    keyboard.append([InlineKeyboardButton(f"‚úÖ {uid}", callback_data=f"confirm_{uid}")])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
                await query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
            else:
                await query.edit_message_text(
                    "‚è≥ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]])
                )
        
        elif data == "broadcast":
            await query.edit_message_text(
                "üì¢ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∏–≥–Ω–∞–ª</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–∫—Ç–∏–≤ –í–•–û–î –í—Ä–µ–º—è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]),
                parse_mode=ParseMode.HTML
            )
        
        elif data.startswith("confirm_"):
            uid = int(data.split("_")[1])
            if uid in users:
                users[uid]['status'] = 'confirmed'
                if uid in pending_ids:
                    del pending_ids[uid]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await self.app.bot.send_message(uid, "‚úÖ <b>–î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>", parse_mode=ParseMode.HTML)
                except:
                    pass
                
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="confirm")]])
                )
        
        elif data == "back_admin":
            await self.show_admin_menu(query.edit_message_text)
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        if user_id == ADMIN_ID:
            # –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª
            if any(word in text.upper() for word in ['EUR/USD', 'GBP/USD', 'USD/JPY', '–í–í–ï–†–•', '–í–ù–ò–ó']):
                await self.broadcast_signal(text)
                await update.message.reply_text("‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞–∑–æ—Å–ª–∞–Ω!")
            else:
                await update.message.reply_text("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º!")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID
            if text.isdigit():
                users[user_id]['platform_id'] = text
                users[user_id]['status'] = 'pending'
                pending_ids[user_id] = text
                
                await update.message.reply_text("‚úÖ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                try:
                    await self.app.bot.send_message(
                        ADMIN_ID,
                        f"üÜî <b>–ù–æ–≤—ã–π ID!</b>\n\nüë§ {update.effective_user.first_name}\nüÜî {user_id}\nüì± {text}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
            else:
                await update.message.reply_text("‚ùóÔ∏è ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
    
    def generate_signal(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        assets = ["EUR/USD", "GBP/USD", "USD/JPY", "USD/CHF"]
        directions = ["–í–í–ï–†–•", "–í–ù–ò–ó"]
        times = ["1–º–∏–Ω", "2–º–∏–Ω", "3–º–∏–Ω", "5–º–∏–Ω"]
        
        asset = random.choice(assets)
        direction = random.choice(directions)
        time = random.choice(times)
        
        return f"üìç {asset}\nüìà {direction}\n‚è±Ô∏è {time}\n‚è∞ {datetime.now().strftime('%H:%M')}"
    
    async def broadcast_signal(self, signal_text):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        confirmed_users = [uid for uid, user in users.items() if user.get('status') == 'confirmed']
        
        text = f"üö® <b>–°–ò–ì–ù–ê–õ!</b>\n\n{signal_text}"
        
        for uid in confirmed_users:
            try:
                await self.app.bot.send_message(uid, text, parse_mode=ParseMode.HTML)
            except:
                continue
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        self.app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await self.app.updater.idle()

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Cloud Run
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

def run_http_server():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Bot is running!")
        
        def log_message(self, format, *args):
            pass
    
    port = int(os.environ.get("PORT", 8080))
    server = HTTPServer(("", port), Handler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
threading.Thread(target=run_http_server, daemon=True).start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio
    bot = SimpleBot()
    asyncio.run(bot.run()) 