import logging
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

from config import BOT_TOKEN, ADMIN_USER_ID, SUBSCRIPTION_PLANS, LOG_LEVEL, LOG_FILE
from database import Database
from signal_generator import SignalGenerator

# Configure logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BinaryOptionsBot:
    def __init__(self):
        self.db = Database()
        self.signal_generator = SignalGenerator()
        self.application = None
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command (customized for registration flow)"""
        user = update.effective_user
        user_id = user.id
        self.db.add_user(
            user_id=user_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        is_admin = user_id == ADMIN_USER_ID
        if is_admin:
            welcome_message = (
                "üëã <b>–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!</b>\n\n"
                "–¢—ã –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
                "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å/–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ –†–∞—Å—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
                "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤\n"
                "‚Ä¢ –ü–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
            keyboard = [
                [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"), InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ID", callback_data="admin_confirm")],
                [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block"), InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", callback_data="admin_signal")],
                [InlineKeyboardButton("‚úâÔ∏è –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            welcome_message = (
                "üëã –ü—Ä–∏–≤–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä!\n\n"
                "–¢—É—Ç —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç.\n\n"
                "üìä –Ø –¥–∞—é —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ö–æ–¥. –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Ç–µ–±–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å.\n\n"
                "–ù–æ —Å–Ω–∞—á–∞–ª–∞ ‚Äî 3 —à–∞–≥–∞:\n"
                "1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ\n"
                "2. –°–∫–∏–¥—ã–≤–∞–µ—à—å ID\n"
                "3. –î–µ–ø–∞–µ—à—å ‚Äî –∏ –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n"
                "üöÄ –ì–æ—Ç–æ–≤? –ù–∏–∂–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ:")
            keyboard = [
                [InlineKeyboardButton("üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register"), InlineKeyboardButton("üÜî –û—Ç–ø—Ä–∞–≤–∏—Ç—å ID", callback_data="send_id")],
                [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
                [InlineKeyboardButton("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/razgondepoz1ta")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/signals - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üîπ <b>–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:</b>
‚Ä¢ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</b> - 1 —Å–∏–≥–Ω–∞–ª –≤ –¥–µ–Ω—å
‚Ä¢ <b>Premium</b> - –î–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ <b>VIP</b> - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

üîπ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã:</b>
1. –ü–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –æ—Ç –±–æ—Ç–∞
2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
5. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if self.db.is_user_subscribed(user_id) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        subscription_type = user.get('subscription_type', 'free')
        expires_at = user.get('subscription_expires')
        
        status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type.upper()}
üîê –°—Ç–∞—Ç—É—Å: {subscription_status}
        """
        
        if expires_at:
            status_text += f"\n‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription"), InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signal")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            status_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /signals command"""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user or user.get('id_status') != 'confirmed':
            await update.message.reply_text(
                "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è üëâ https://bit.ly/4jb8a4k\n–ü–æ—Ç–æ–º —Å–∫–∏–Ω—å ID –∏ –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç ‚Äî –≤—Å—ë –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
            return
        
        await self.send_latest_signals(user_id, update.message.reply_text)
    
    async def statistics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /statistics command"""
        stats = self.signal_generator.get_statistics()
        
        stats_text = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_signals']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%
üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {stats['last_generated'].strftime('%H:%M:%S')}

üéØ <b>–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>
        """
        
        active_signals = self.db.get_active_signals()
        if active_signals:
            for signal in active_signals[:5]:  # Show last 5 signals
                stats_text += f"""
üî∏ {signal['asset']} - {signal['signal_type']}
   ‚è±Ô∏è –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {signal['expiry_time']}
   üìä –¢–æ—á–Ω–æ—Å—Ç—å: {signal['accuracy']}%
   üïê –°–æ–∑–¥–∞–Ω: {signal['created_at']}
                """
        else:
            stats_text += "\nüì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks for registration flow and admin"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        is_admin = user_id == ADMIN_USER_ID
        data = query.data
        if is_admin:
            await self.handle_admin_callback(query, data)
            return
        await self.handle_user_callback(query, data)

    async def handle_admin_callback(self, query, data):
        if data == "admin_users":
            users = self.db.get_all_users()
            text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n" + "\n".join([str(uid) for uid in users])
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        elif data == "admin_confirm":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]))
        elif data == "admin_block":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /block ID –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]))
        elif data == "admin_signal":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /signal –ê–∫—Ç–∏–≤ –í—Ö–æ–¥ –í—Ä–µ–º—è –°—Ä–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∏–≥–Ω–∞–ª–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]))
        elif data == "admin_send":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /send ID —Ç–µ–∫—Å—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]))
        elif data == "admin_main_menu":
            await self.start_admin_menu(query)
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]))

    async def start_admin_menu(self, query):
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"), InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ID", callback_data="admin_confirm")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block"), InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", callback_data="admin_signal")],
            [InlineKeyboardButton("‚úâÔ∏è –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!</b>\n\n–¢—ã –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å/–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –†–∞—Å—Å—ã–ª–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤\n‚Ä¢ –ü–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

    async def handle_user_callback(self, query, data):
        if data == "register":
            await query.edit_message_text(
                "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ üëá\nhttps://bit.ly/4jb8a4k\n\n‚ÄºÔ∏è –ë–µ–∑ –Ω–µ—ë —Ç—ã –Ω–µ –ø–æ–ø–∞–¥—ë—à—å –≤ –±–∞–∑—É, –∏ –±–æ—Ç –Ω–µ –¥–∞—Å—Ç —Ç–µ–±–µ —Å–∏–≥–Ω–∞–ª—ã.\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî —Å–∫–∏–Ω—å ID —Å—é–¥–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        elif data == "send_id":
            await query.edit_message_text(
                "üì§ –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π ID –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.\n–Ø –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—é ‚Äî –∏ –æ—Ç–∫—Ä–æ—é —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º.\n\n–ï—Å–ª–∏ —É–∂–µ –¥–µ–ø–Ω—É–ª ‚Äî –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø —Å—Ä–∞–∑—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
            )
        elif data == "get_signal":
            user = self.db.get_user(query.from_user.id)
            if not user or user.get('id_status') != 'confirmed':
                await query.edit_message_text(
                    "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –ø–æ–∫–∞ –∑–∞–∫—Ä—ã—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è üëâ https://bit.ly/4jb8a4k\n–ü–æ—Ç–æ–º —Å–∫–∏–Ω—å ID –∏ –ø–æ–ø–æ–ª–Ω–∏ —Å—á—ë—Ç ‚Äî –≤—Å—ë –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
                )
            else:
                signal = self.signal_generator.generate_signal('EUR/USD')
                if not signal:
                    await query.edit_message_text("üòî –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
                else:
                    text = (
                        f"üì¢ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª:\n\n"
                        f"üìç –ê–∫—Ç–∏–≤: {signal['asset']}\n"
                        f"üìà –í–•–û–î: {'–í–í–ï–†–•' if signal['signal_type']=='CALL' else '–í–ù–ò–ó'}\n"
                        f"‚è± –í—Ä–µ–º—è: —Å–µ–π—á–∞—Å\n"
                        f"‚åõ –°—Ä–æ–∫: 2 –º–∏–Ω—É—Ç—ã\n"
                        f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è\n\n"
                        f"üëÄ –ó–∞—Ö–æ–¥–∏ –±—ã—Å—Ç—Ä–æ ‚Äî –æ–∫–Ω–æ —Å–¥–µ–ª–∫–∏ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å—Å—è!"
                    )
                    keyboard = [
                        [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signal"), InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        elif data == "main_menu":
            await self.start_user_menu(query)
        elif data == "pay_premium":
            await self.handle_premium_subscription(query)
        elif data == "pay_vip":
            await self.handle_vip_subscription(query)
        elif data == "statistics":
            await self.handle_statistics(query)
        elif data == "get_signals":
            await self.handle_free_signals(query)
        elif data == "renew_subscription":
            await self.handle_renew_subscription(query)
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))

    async def start_user_menu(self, query):
        keyboard = [
            [InlineKeyboardButton("üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register"), InlineKeyboardButton("üÜî –û—Ç–ø—Ä–∞–≤–∏—Ç—å ID", callback_data="send_id")],
            [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
            [InlineKeyboardButton("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/razgondepoz1ta")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, —Ç—Ä–µ–π–¥–µ—Ä!\n\n–¢—É—Ç —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç.\n\nüìä –Ø –¥–∞—é —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ö–æ–¥. –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Ç–µ–±–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å.\n\n–ù–æ —Å–Ω–∞—á–∞–ª–∞ ‚Äî 3 —à–∞–≥–∞:\n1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ\n2. –°–∫–∏–¥—ã–≤–∞–µ—à—å ID\n3. –î–µ–ø–∞–µ—à—å ‚Äî –∏ –ø–æ–ª—É—á–∞–µ—à—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º\n\nüöÄ –ì–æ—Ç–æ–≤? –ù–∏–∂–µ –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_free_signals(self, query):
        """Handle free signals request"""
        user_id = query.from_user.id
        
        # Check if user already got free signal today
        user = self.db.get_user(user_id)
        if user and user.get('last_activity'):
            last_activity = datetime.fromisoformat(user['last_activity'].replace('Z', '+00:00'))
            if datetime.now() - last_activity < timedelta(days=1):
                await query.edit_message_text(
                    "‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]),
                    parse_mode=ParseMode.HTML
                )
                return
        
        # Generate and send free signal
        signals = self.signal_generator.generate_signals_for_all_assets()
        if signals:
            signal = signals[0]  # Take first signal
            await self.send_signal_message(query.edit_message_text, signal, user_id)
        else:
            await query.edit_message_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]),
                parse_mode=ParseMode.HTML
            )
    
    async def handle_premium_subscription(self, query):
        """Handle premium subscription request"""
        subscription_text = f"""
üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>

üìä <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ –î–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${SUBSCRIPTION_PLANS['premium'] * 2} –∑–∞ {SUBSCRIPTION_PLANS['premium']} –¥–Ω–µ–π

üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_premium")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_vip_subscription(self, query):
        """Handle VIP subscription request"""
        subscription_text = f"""
üëë <b>VIP –ø–æ–¥–ø–∏—Å–∫–∞</b>

üìä <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${SUBSCRIPTION_PLANS['vip'] * 3} –∑–∞ {SUBSCRIPTION_PLANS['vip']} –¥–Ω–µ–π

üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_vip")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            subscription_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_statistics(self, query):
        """Handle statistics request"""
        stats = self.signal_generator.get_statistics()
        
        stats_text = f"""
üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_signals']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%
üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª: {stats['last_generated'].strftime('%H:%M:%S')}
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_help(self, query):
        """Handle help request"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/signals - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üîπ <b>–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:</b>
‚Ä¢ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</b> - 1 —Å–∏–≥–Ω–∞–ª –≤ –¥–µ–Ω—å
‚Ä¢ <b>Premium</b> - –î–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ <b>VIP</b> - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ—Ç–µ—Ä—è—Ç—å
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def handle_renew_subscription(self, query):
        """Handle subscription renewal request"""
        keyboard = [
            [InlineKeyboardButton("üíé Premium", callback_data="pay_premium"), InlineKeyboardButton("üëë VIP", callback_data="pay_vip")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def send_signal_message(self, send_function, signal: dict, user_id: int):
        """Send formatted signal message"""
        signal_text = f"""
üö® <b>–ù–û–í–´–ô –°–ò–ì–ù–ê–õ</b>

üìä <b>–ê–∫—Ç–∏–≤:</b> {signal['asset']}
üéØ <b>–¢–∏–ø:</b> {signal['signal_type']}
‚è±Ô∏è <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {signal['expiry_time']}
üí∞ <b>–í—Ö–æ–¥:</b> {signal['entry_price']}
üéØ <b>–¶–µ–ª—å:</b> {signal['target_price']}
üõë <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> {signal['stop_loss']}
üìà <b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {signal['accuracy']}%

‚è∞ <b>–í—Ä–µ–º—è:</b> {signal['timestamp'].strftime('%H:%M:%S')}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
‚Ä¢ –ù–µ —Ç–æ—Ä–≥—É–π—Ç–µ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö

‚ö†Ô∏è <b>–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>
–¢–æ—Ä–≥–æ–≤–ª—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –æ–ø—Ü–∏–æ–Ω–∞–º–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –µ—â–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signal"), InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await send_function(
            signal_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        # Save signal to database
        signal_id = self.db.add_signal(
            asset=signal['asset'],
            signal_type=signal['signal_type'],
            expiry_time=signal['expiry_time'],
            entry_price=signal['entry_price'],
            target_price=signal['target_price'],
            stop_loss=signal['stop_loss'],
            accuracy=signal['accuracy']
        )
        
        logger.info(f"Signal sent to user {user_id}: {signal}")
    
    async def send_latest_signals(self, user_id: int, send_function):
        """Send latest signals to user"""
        # Check subscription
        if not self.db.is_user_subscribed(user_id):
            await send_function(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Get active signals
        active_signals = self.db.get_active_signals()
        
        if not active_signals:
            # Generate new signals
            signals = self.signal_generator.generate_signals_for_all_assets()
            if signals:
                for signal in signals[:3]:  # Send up to 3 signals
                    await self.send_signal_message(send_function, signal, user_id)
            else:
                await send_function(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]),
                    parse_mode=ParseMode.HTML
                )
        else:
            # Send existing active signals
            for signal in active_signals[:3]:
                await self.send_signal_message(send_function, signal, user_id)
    
    async def broadcast_signals(self):
        """Broadcast signals to all subscribed users"""
        try:
            # Generate new signals
            signals = self.signal_generator.generate_signals_for_all_assets()
            
            if not signals:
                logger.info("No signals generated for broadcast")
                return
            
            # Get all subscribed users
            subscribed_users = self.db.get_subscribed_users()
            
            if not subscribed_users:
                logger.info("No subscribed users found")
                return
            
            # Send signals to all subscribed users
            for user_id in subscribed_users:
                try:
                    for signal in signals[:2]:  # Send up to 2 signals per broadcast
                        await self.send_signal_message(
                            lambda text, **kwargs: self.application.bot.send_message(user_id, text, **kwargs),
                            signal,
                            user_id
                        )
                        await asyncio.sleep(0.1)  # Small delay to avoid rate limiting
                except Exception as e:
                    logger.error(f"Error sending signal to user {user_id}: {e}")
                    continue
            
            logger.info(f"Broadcasted {len(signals)} signals to {len(subscribed_users)} users")
            
        except Exception as e:
            logger.error(f"Error in broadcast_signals: {e}")
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin commands (customized for new flow)"""
        user_id = update.effective_user.id
        if user_id != ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        if not context.args:
            await update.message.reply_text(
                "üîß <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                "/users ‚Äî –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/send ID —Ç–µ–∫—Å—Ç ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/signal –ê–∫—Ç–∏–≤ –í—Ö–æ–¥ –í—Ä–µ–º—è –°—Ä–æ–∫ ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é\n"
                "/confirm ID ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø\n"
                "/block ID ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞\n"
                "/check ID ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                parse_mode=ParseMode.HTML
            )
            return
        command = context.args[0]
        if command == "users":
            users = self.db.get_all_users()
            text = f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n" + "\n".join([str(uid) for uid in users])
            await update.message.reply_text(text)
        elif command == "send" and len(context.args) >= 3:
            target_id = int(context.args[1])
            msg = " ".join(context.args[2:])
            try:
                await self.application.bot.send_message(target_id, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{msg}")
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        elif command == "signal" and len(context.args) >= 5:
            asset, direction, time_str, expiry = context.args[1:5]
            text = (f"üì¢ –†—É—á–Ω–æ–π —Å–∏–≥–Ω–∞–ª!\n\n"
                    f"üìç –ê–∫—Ç–∏–≤: {asset}\n"
                    f"üìà –í–•–û–î: {direction}\n"
                    f"‚è± –í—Ä–µ–º—è: {time_str}\n"
                    f"‚åõ –°—Ä–æ–∫: {expiry}\n"
                    f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: –≤—ã—Å–æ–∫–∞—è")
            users = self.db.get_all_users()
            for uid in users:
                try:
                    await self.application.bot.send_message(uid, text)
                except Exception:
                    pass
            await update.message.reply_text("‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞–∑–æ—Å–ª–∞–Ω.")
        elif command == "confirm" and len(context.args) == 2:
            target_id = int(context.args[1])
            self.db.confirm_user_id(target_id)
            await update.message.reply_text(f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è {target_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            try:
                await self.application.bot.send_message(target_id, "‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –æ—Ç–∫—Ä—ã—Ç! –ú–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã.")
            except Exception:
                pass
        elif command == "block" and len(context.args) == 2:
            target_id = int(context.args[1])
            self.db.block_user(target_id)
            await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            try:
                await self.application.bot.send_message(target_id, "üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception:
                pass
        elif command == "check" and len(context.args) == 2:
            target_id = int(context.args[1])
            user = self.db.get_user(target_id)
            if not user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await update.message.reply_text(f"ID: {user.get('platform_id')}\n–°—Ç–∞—Ç—É—Å: {user.get('id_status')}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
    
    async def handle_id_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle user sending platform ID"""
        user = update.effective_user
        user_id = user.id
        text = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ (ID –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
        if not text.isdigit():
            await update.message.reply_text(
                "‚ùóÔ∏è ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç ID
        existing = self.db.get_user_by_platform_id(text)
        if existing and existing.get('user_id') != user_id:
            await update.message.reply_text(
                "‚õîÔ∏è –≠—Ç–æ—Ç ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'pending'
        self.db.set_platform_id(user_id, text)
        await update.message.reply_text(
            "‚úÖ ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n–û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º.\n\n–ï—Å–ª–∏ —É–∂–µ –¥–µ–ø–Ω—É–ª ‚Äî –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ä–∞–∑—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        # TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ 30 –º–∏–Ω, 1 —á–∞—Å, 2 —á–∞—Å–∞...)
    
    def setup_handlers(self):
        """Setup bot handlers"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("signals", self.signals_command))
        self.application.add_handler(CommandHandler("statistics", self.statistics_command))
        self.application.add_handler(CommandHandler("admin", self.admin_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_id_message))
    
    def setup_scheduler(self):
        """Setup signal generation scheduler"""
        # Generate signals every 30 minutes
        schedule.every(30).minutes.do(self.run_signal_generation)
        
        # Broadcast signals every hour
        schedule.every().hour.do(self.run_broadcast)
    
    def run_signal_generation(self):
        """Run signal generation in background"""
        asyncio.create_task(self.broadcast_signals())
    
    def run_broadcast(self):
        """Run broadcast in background"""
        asyncio.create_task(self.broadcast_signals())
    
    async def run(self):
        """Run the bot"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN not found in environment variables")
            return
        
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.setup_scheduler()
        
        logger.info("Starting Binary Options Signals Bot...")
        
        # Start the bot
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        try:
            # Keep the bot running
            while True:
                schedule.run_pending()
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("Stopping bot...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

def run_http_stub():
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"Bot is running!")
    port = int(os.environ.get("PORT", 8080))
    server = HTTPServer(("", port), Handler)
    server.serve_forever()

threading.Thread(target=run_http_stub, daemon=True).start()

async def main():
    """Main function"""
    bot = BinaryOptionsBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main()) 