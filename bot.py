import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

from config import BOT_TOKEN, ADMIN_USER_ID, SUBSCRIPTION_PLANS, LOG_LEVEL, LOG_FILE
from database import Database
from signal_generator import SignalGenerator

# Configure logging
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class BinaryOptionsBot:
    def __init__(self):
        self.db = Database()
        self.signal_generator = SignalGenerator()
        self.application = None
        self.processing_users = set()  # Prevent duplicate processing
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        user_id = user.id
        
        # Prevent duplicate processing
        if user_id in self.processing_users:
            return
        self.processing_users.add(user_id)
        
        try:
            # Add user to database
            self.db.add_user(
                user_id=user_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            is_admin = user_id == ADMIN_USER_ID
            
            if is_admin:
                await self.show_admin_menu(update.message.reply_text)
            else:
                await self.show_user_menu(update.message.reply_text)
                
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            self.processing_users.discard(user_id)

    async def show_admin_menu(self, reply_function):
        """Show admin menu"""
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ID", callback_data="admin_confirm")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞", callback_data="admin_signal")],
            [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="admin_message")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await reply_function(
            "üëã <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

    async def show_user_menu(self, reply_function):
        """Show user menu"""
        keyboard = [
            [InlineKeyboardButton("üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
            [InlineKeyboardButton("üÜî –û—Ç–ø—Ä–∞–≤–∏—Ç—å ID", callback_data="send_id")],
            [InlineKeyboardButton("üìà –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
            [InlineKeyboardButton("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/razgondepoz1ta")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await reply_function(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID\n3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        user_id = query.from_user.id
        
        # Prevent duplicate processing
        if user_id in self.processing_users:
            await query.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            return
        self.processing_users.add(user_id)
        
        try:
            await query.answer()
            data = query.data
            
            is_admin = user_id == ADMIN_USER_ID
            
            if is_admin:
                await self.handle_admin_callback(query, data)
            else:
                await self.handle_user_callback(query, data)
                
        except Exception as e:
            logger.error(f"Error in button_callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        finally:
            self.processing_users.discard(user_id)

    async def handle_admin_callback(self, query, data):
        """Handle admin callbacks"""
        if data == "admin_users":
            await self.show_users_list(query)
        elif data == "admin_confirm":
            await self.show_pending_users(query)
        elif data == "admin_block":
            await self.show_users_for_block(query)
        elif data == "admin_signal":
            await self.show_signal_form(query)
        elif data == "admin_message":
            await self.show_message_form(query)
        elif data.startswith("confirm_"):
            user_id = int(data.split("_")[1])
            await self.confirm_user(query, user_id)
        elif data.startswith("block_"):
            user_id = int(data.split("_")[1])
            await self.block_user(query, user_id)
        elif data == "back_admin":
            await self.show_admin_menu(query.edit_message_text)

    async def handle_user_callback(self, query, data):
        """Handle user callbacks"""
        if data == "register":
            await query.edit_message_text(
                "üîó <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://bit.ly/4jb8a4k\n\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_user")]]),
                parse_mode=ParseMode.HTML
            )
        elif data == "send_id":
            await query.edit_message_text(
                "üÜî <b>–û—Ç–ø—Ä–∞–≤–∫–∞ ID</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à ID –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_user")]]),
                parse_mode=ParseMode.HTML
            )
        elif data == "get_signal":
            await self.send_signal_to_user(query)
        elif data == "back_user":
            await self.show_user_menu(query.edit_message_text)

    async def show_users_list(self, query):
        """Show users list for admin"""
        users = self.db.get_all_users_detailed()
        
        if not users:
            text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç"
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            for user in users[:10]:
                status = user.get('id_status', 'pending')
                emoji = "‚úÖ" if status == 'confirmed' else "‚è≥" if status == 'pending' else "‚ùå"
                text += f"{emoji} ID: {user['user_id']} | {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {status}\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]],
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

    async def show_pending_users(self, query):
        """Show pending users for confirmation"""
        users = self.db.get_pending_users()
        
        if not users:
            text = "‚è≥ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]],
        else:
            text = "‚è≥ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>\n\n"
            keyboard = []
            
            for user in users:
                text += f"üë§ ID: {user['user_id']} | {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                keyboard.append([InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {user['user_id']}", callback_data=f"confirm_{user['user_id']}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

    async def show_users_for_block(self, query):
        """Show users for blocking"""
        users = self.db.get_all_users_detailed()
        
        if not users:
            text = "üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]],
        else:
            text = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>\n\n"
            keyboard = []
            
            for user in users:
                text += f"üë§ ID: {user['user_id']} | {user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                keyboard.append([InlineKeyboardButton(f"üö´ –ë–ª–æ–∫ {user['user_id']}", callback_data=f"block_{user['user_id']}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

    async def confirm_user(self, query, user_id):
        """Confirm user access"""
        self.db.confirm_user_id(user_id)
        
        # Notify user
        try:
            await self.application.bot.send_message(
                user_id,
                "‚úÖ <b>–î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_confirm")]])
        )

    async def block_user(self, query, user_id):
        """Block user"""
        self.db.block_user(user_id)
        
        # Notify user
        try:
            await self.application.bot.send_message(
                user_id,
                "üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>",
                parse_mode=ParseMode.HTML
            )
        except:
            pass
        
        await query.edit_message_text(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_block")]])
        )

    async def show_signal_form(self, query):
        """Show signal broadcast form"""
        await query.edit_message_text(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ê–∫—Ç–∏–≤ –í–•–û–î –í—Ä–µ–º—è\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nEUR/USD –í–í–ï–†–• 2–º–∏–Ω",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]),
            parse_mode=ParseMode.HTML
        )

    async def show_message_form(self, query):
        """Show message broadcast form"""
        await query.edit_message_text(
            "‚úâÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º</b>\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]]),
            parse_mode=ParseMode.HTML
        )

    async def send_signal_to_user(self, query):
        """Send signal to user"""
        user = self.db.get_user(query.from_user.id)
        
        if not user or user.get('id_status') != 'confirmed':
            await query.edit_message_text(
                "‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_user")]]),
                parse_mode=ParseMode.HTML
            )
            return
        
        # Generate signal
        signal = self.signal_generator.generate_signal()
        if not signal:
            await query.edit_message_text(
                "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_user")]])
            )
            return
        
        # Format signal
        text = f"""
üì¢ <b>–°–ò–ì–ù–ê–õ</b>

üìç –ê–∫—Ç–∏–≤: {signal['asset']}
üìà –í–•–û–î: {'–í–í–ï–†–•' if signal['signal_type']=='CALL' else '–í–ù–ò–ó'}
‚è±Ô∏è –í—Ä–µ–º—è: {signal['expiry_time']}
üí∞ –í—Ö–æ–¥: {signal['entry_price']}
üéØ –¶–µ–ª—å: {signal['target_price']}
üìä –¢–æ—á–Ω–æ—Å—Ç—å: {signal['accuracy']}%

‚è∞ {signal['timestamp'].strftime('%H:%M:%S')}
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ï—â–µ —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_user")]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        user = update.effective_user
        user_id = user.id
        text = update.message.text.strip()
        
        # Prevent duplicate processing
        if user_id in self.processing_users:
            return
        self.processing_users.add(user_id)
        
        try:
            if user_id == ADMIN_USER_ID:
                await self.handle_admin_message(update, text)
            else:
                await self.handle_user_message(update, text)
        except Exception as e:
            logger.error(f"Error handling message: {e}")
        finally:
            self.processing_users.discard(user_id)

    async def handle_admin_message(self, update: Update, text: str):
        """Handle admin messages"""
        # Check if it's a signal
        if any(keyword in text.upper() for keyword in ['EUR/USD', 'GBP/USD', 'USD/JPY', '–í–í–ï–†–•', '–í–ù–ò–ó']):
            await self.broadcast_signal(text)
            await update.message.reply_text("‚úÖ –°–∏–≥–Ω–∞–ª —Ä–∞–∑–æ—Å–ª–∞–Ω!")
        else:
            await self.broadcast_message(text)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!")

    async def handle_user_message(self, update: Update, text: str):
        """Handle user messages"""
        if not text.isdigit():
            await update.message.reply_text("‚ùóÔ∏è ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return
        
        # Check if ID already exists
        existing = self.db.get_user_by_platform_id(text)
        if existing and existing.get('user_id') != update.effective_user.id:
            await update.message.reply_text("‚õîÔ∏è –≠—Ç–æ—Ç ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            return
        
        # Save ID
        self.db.set_platform_id(update.effective_user.id, text)
        await update.message.reply_text("‚úÖ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        
        # Notify admin
        await self.notify_admin_new_id(update.effective_user, text)

    async def notify_admin_new_id(self, user, platform_id):
        """Notify admin about new ID"""
        try:
            text = f"""
üÜî <b>–ù–æ–≤—ã–π ID!</b>

üë§ {user.first_name or user.username}
üÜî {user.id}
üì± {platform_id}
‚è∞ {datetime.now().strftime('%H:%M')}
            """
            
            keyboard = [
                [InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {user.id}", callback_data=f"confirm_{user.id}")],
                [InlineKeyboardButton(f"üö´ –ë–ª–æ–∫ {user.id}", callback_data=f"block_{user.id}")]
            ]
            
            await self.application.bot.send_message(
                ADMIN_USER_ID,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error notifying admin: {e}")

    async def broadcast_signal(self, signal_text: str):
        """Broadcast signal to confirmed users"""
        users = self.db.get_all_users_detailed()
        confirmed_users = [user for user in users if user.get('id_status') == 'confirmed']
        
        text = f"""
üö® <b>–°–ò–ì–ù–ê–õ!</b>

{signal_text}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
        """
        
        for user in confirmed_users:
            try:
                await self.application.bot.send_message(
                    user['user_id'],
                    text,
                    parse_mode=ParseMode.HTML
                )
                await asyncio.sleep(0.05)  # Small delay
            except:
                continue

    async def broadcast_message(self, message_text: str):
        """Broadcast message to all users"""
        users = self.db.get_all_users_detailed()
        
        text = f"""
üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

{message_text}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
        """
        
        for user in users:
            try:
                await self.application.bot.send_message(
                    user['user_id'],
                    text,
                    parse_mode=ParseMode.HTML
                )
                await asyncio.sleep(0.05)  # Small delay
            except:
                continue

    async def auto_broadcast_signals(self):
        """Auto broadcast signals every 15 minutes"""
        while True:
            try:
                await asyncio.sleep(15 * 60)  # 15 minutes
                
                signal = self.signal_generator.generate_signal()
                if signal:
                    await self.broadcast_signal(f"üìç {signal['asset']}\nüìà {'–í–í–ï–†–•' if signal['signal_type']=='CALL' else '–í–ù–ò–ó'}\n‚è±Ô∏è {signal['expiry_time']}")
                    
            except Exception as e:
                logger.error(f"Error in auto broadcast: {e}")
                await asyncio.sleep(60)

    def setup_handlers(self):
        """Setup bot handlers"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def run(self):
        """Run the bot"""
        try:
            if not BOT_TOKEN:
                logger.error("BOT_TOKEN not found")
                return
            
            self.application = Application.builder().token(BOT_TOKEN).build()
            self.setup_handlers()
            
            logger.info("Starting bot...")
            
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            # Start auto broadcast
            asyncio.create_task(self.auto_broadcast_signals())
            
            logger.info("Bot started successfully!")
            
            # Keep running
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"Critical error: {e}")
        finally:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            except:
                pass

def run_http_stub():
    try:
        class Handler(BaseHTTPRequestHandler):
            def do_GET(self):
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b"Bot is running!")
            
            def log_message(self, format, *args):
                pass
        
        port = int(os.environ.get("PORT", 8080))
        server = HTTPServer(("", port), Handler)
        server.serve_forever()
    except Exception as e:
        logger.error(f"HTTP server error: {e}")

# Start HTTP server
threading.Thread(target=run_http_stub, daemon=True).start()

async def main():
    """Main function"""
    try:
        bot = BinaryOptionsBot()
        await bot.run()
    except Exception as e:
        logger.error(f"Main error: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 